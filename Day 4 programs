#Day 4
#program 1:
# (i)
kelvin_to_celsius <- function(temp_in_kelvin){
  temp_in_celsius <- temp_in_kelvin - 273.15
  return(temp_in_celsius)
}
result <- kelvin_to_celsius(300)
print(result)

# (ii)
x <- c(90, 50, 70, 80, 70, 60, 20, 30, 80, 90, 20)
mean(x)
median(x)
table(x)

# (iii)
x <- c(90, 50, 70, 80, 70, 60, 20, 30, 80, 90, 20)
sort(x)[2] # 2nd highest value
sort(x)[length(x)-2] # 3rd lowest value

#program 2:
# (i)
airquality <- airquality

sum_temp <- 0
n <- nrow(airquality)
for(i in 1:n){
 sum_temp <- sum_temp + airquality[i, "Temp"]
}
mean_temp <- sum_temp / n
print(mean_temp)

# (ii)
first_five_rows <- airquality[1:5, ]
print(first_five_rows)

# (iii)
columns_to_remove <- c("Temp", "Wind")
new_airquality <- airquality[, !(names(airquality) %in% columns_to_remove)]
print(new_airquality)

# (iv)
min_temp <- min(airquality$Temp)
coldest_day <- airquality[airquality$Temp == min_temp, ]
print(coldest_day)

# (v)
windy_days <- airquality[airquality$Wind > 17, ]
count_windy_days <- nrow(windy_days)
print(count_windy_days)

#program 3:
#  (i)
airquality <- airquality
summary(airquality)

# (ii)
airquality_melt <- melt(airquality, id.vars = c("Month", "Day"))
print(airquality_melt)

# (iii)
airquality_melt <- melt(airquality, id.vars = c("Month", "Day"))
print(airquality_melt)

# (iv)
airquality_cast <- dcast(airquality_melt, Month + Day ~ variable)
print(airquality_cast)

# (v)
airquality_cast <- dcast(airquality_melt, Month + Day ~ variable)
print(airquality_cast)

#program 4:
 #(i)
 airquality <- airquality
na_count <- sum(is.na(airquality))
if (na_count / nrow(airquality) < 0.1) {
  airquality <- na.omit(airquality)
} else {
  for (col in colnames(airquality)) {
    airquality[is.na(airquality[col]), col] <- mean(airquality[col], na.rm = T)
  }
}

# (ii)
model <- lm(Ozone ~ Solar.R, data = airquality)
summary(model)

# (iii)
library(ggplot2)
ggplot(airquality, aes(x = Solar.R, y = Ozone)) + 
  geom_point() + 
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE) + 
  ggtitle("Scatter Plot of Ozone vs Solar.R with Regression Line")

#program 5:
# (i)
letters_sample <- sample(LETTERS, 5)
letters_factor <- factor(letters_sample)
levels(letters_factor)

# (ii)
letters_sample <- sample(LETTERS, 5)
letters_factor <- factor(letters_sample)
levels(letters_factor)

# (iii)
find_vowels <- function(str){
  vowels <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
  count <- sum(str %in% vowels)
  return(count)
}

c <- "matrix"
find_vowels(c)

#program 6:
# (i)
data("ChickWeight")
str(ChickWeight)
nrow(ChickWeight) 

# (ii)
tail(ChickWeight, 6)

# (iii)
ChickWeight_order <- arrange(ChickWeight, weight)
ChickWeight_grouped <- group_by(ChickWeight_order, Diet)
ChickWeight_grouped_summarized <- summarize(ChickWeight_grouped, mean_weight = mean(weight))

# (iv)
library(reshape2)
ChickWeight_melt <- melt(ChickWeight, id.vars = c("Chick", "Time", "Diet"))

# (v)
ChickWeight_cast <- dcast(ChickWeight_melt, Diet ~ variable, mean)

#program 7:
# (i)
summary(ChickWeight)

# (ii)
library(ggplot2)
ggplot(ChickWeight, aes(x=Diet, y=weight)) + 
  geom_boxplot()

# (iii)
ggplot(ChickWeight[ChickWeight$Diet==1,], aes(x=weight)) + 
  geom_histogram(binwidth=2)

# (iv)
ggplot(ChickWeight[ChickWeight$Diet==4,], aes(x=weight)) + 
  geom_histogram(binwidth=2)

# (v)
ggplot(ChickWeight, aes(x=Time, y=weight, color=Diet)) + 
  geom_point() + 
  geom_smooth(method=lm)

#program 8:
# (i)
model <- lm(weight ~ Time + Diet, data=ChickWeight)

# (ii)
new_data <- data.frame(Time=10, Diet=1)
new_data$Diet <- as.factor(new_data$Diet)
predicted_weight <- predict(model, newdata=new_data)

# (iii)
actual_weight <- 10 # (or any other value for actual weight)
error <- predicted_weight - actual_weight
mean(error^2)
